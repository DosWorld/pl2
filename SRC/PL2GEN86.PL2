#
# MIT License
#
# Copyright (c) 2020 Viacheslav Komenda
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

const I86_MOV_AX = "\xb8.."
const I86_CALL   = "\xe8.."
const I86_JMP    = "\xe9.."

function gen_word_size
        return 2
end

sub gen_calign
        dim i, n
        if (gen_code_align = 0) or (gen_code_align = 1) then
                return
        end
        n = gen_code_align - mod(code_ptr, gen_code_align)
        i = 0
        while i < n
                code_ptr = putb(code, code_ptr, &H90)
                i = i + 1
        end
end

sub gen_dalign
        dim i, n
        if (gen_data_align = 0) or (gen_data_align = 1) then
                return
        end
        n = gen_data_align - mod(code_ptr, gen_data_align)
        i = 0
        while i < n
                code_ptr = putb(code, code_ptr, 0)
                i = i + 1
        end
end

sub gen_op(op)
        if op = '+' then
                putbin(2, "\x01\xd8")
        elseif op = '-' then
                putbin(2, "\x29\xd8")
        elseif op = '*' then
                putbin(2, "\xf7\xeb")
        elseif op = '/' then
                putbin(4, "\x31\xd2\xf7\xf3")
        elseif op = '=' then
                putbin(9, "\x31\xC9\x39\xD8\x75\x01\x41\x89\xC8")
        elseif op = LEX_NE then
                putbin(9, "\x31\xC9\x39\xD8\x74\x01\x41\x89\xC8")
        elseif op = '<' then
                putbin(9, "\x31\xC9\x39\xD8\x73\x01\x41\x89\xC8")
        elseif op = LEX_LE then
                putbin(9, "\x31\xC9\x39\xD8\x7F\x01\x41\x89\xC8")
        elseif op = '>' then
                putbin(9, "\x31\xC9\x39\xD8\x7E\x01\x41\x89\xC8")
        elseif op = LEX_GE then
                putbin(9, "\x31\xC9\x39\xD8\x7C\x01\x41\x89\xC8")
        elseif op = LEX_OR then
                putbin(2, "\x09\xD8")
        elseif op = LEX_AND then
                putbin(2, "\x21\xD8")
        end
end

sub gen_call(ofs)
        putbin(3, I86_CALL)
        code%[code_ptr - 2] = ofs - code_ptr
end

sub gen_neg
        putbin(2, "\xF7\xD8")
end

sub gen_not
        putbin(11, "\x85\xC0\x75\x05\xB8\x01\x00\xEB\x02\x31\xC0")
end

sub gen_ret(pcount)
        putbin(3, "\x89\xec\x5d")
        if pcount then
                putbin(3, "\xc2..")
                code%[code_ptr - 2] = shl(pcount, 1)
        else
                putbin(1, "\xc3")
        end
end

sub gen_load_int(dig)
        if dig then
                putbin(3, I86_MOV_AX)
                code%[code_ptr - 2] = dig
        else
                putbin(2, "\x31\xC0")
        end
end

sub gen_init
        if gen_target = TARGET_COM then
                code_ofs = &H0100
                code_ptr = &H0100
                putbin(3, I86_JMP)
        elseif gen_target = TARGET_EXE then
#                code_ofs = &H0100
                code_ofs = 0
                code_ptr = 0
        end
        def("EXITPROC", SYM_GLOBAL, 0, code_ptr)
        code_ptr = putw(code, code_ptr, 0)
        def("RCODE", SYM_GLOBAL, 0, code_ptr)
        code_ptr = putw(code, code_ptr, 0)
        def("FREE_MEMORY", SYM_GLOBAL, 0, code_ptr)
        code_ptr = putw(code, code_ptr, 0)
end


sub gen_initfinal(i, t)
        while i <> -1
                if table%[i + DICT_TYP] = t then
                        if t = SYM_INIT then
                                gen_initfinal(table%[i], t)
                                gen_call(table%[i + DICT_OFS])
                                return
                        elseif t = SYM_DONE then
                                gen_call(table%[i + DICT_OFS])
                        end
                end
                i = table%[i]
        end
end

sub gen_exe_header(entry_point)
        dim bss_par, block_count, inlastblock

        bss_par = &hffff - code_ptr + code_ofs
        if bin_and(bss_par, &h000F) then
                bss_par = shr(bss_par, 4) + 1
        else
                bss_par = shr(bss_par, 4)
        end
        inlastblock = mod(code_ptr - code_ofs, 512)
        block_count = (code_ptr - code_ofs) / 512
        if inlastblock then
                block_count = block_count + 1
        end

        code = code - 32
        code_ptr = code_ptr + 32

        memfill(code, 32, 0)
        code%[0] = &H5A4D
        code%[2] = inlastblock
        code%[4] = block_count
        code%[8] = 2
        code%[10] = bss_par
        code%[12] = bss_par
#        code%[i + 14] = &HFFF0 #
        code%[16] = &HFFFE
        code%[20] = entry_point
#        code%[i + 22] = &HFFF0 #
#        code = code - 32
#        code_ptr = code_ptr + 32
end

sub gen_done
        dim i, entry_point

        gen_calign()
        if gen_target = TARGET_COM then
                # fix jump to main part
                code%[code_ofs + 1] = code_ptr - 3 - code_ofs
                entry_point = &H0100
        elseif gen_target = TARGET_EXE then
                entry_point = code_ptr
                putbin(4, "\x0E\x0E\x1F\x07")
        end

        # Call INITIALIZATION's
        gen_initfinal(dict_ptr, SYM_INIT)

        # Call Main
        i = lookup("MAIN")
        if i = -1 then
                print("No MAIN sub here.\n")
                error()
        end
        gen_call(table%[i + DICT_OFS])

        code%[table%[lookup("EXITPROC") + DICT_OFS]] = code_ptr

        # Gen call all FINALIZATION's
        gen_initfinal(dict_ptr, SYM_DONE)

        putbin(1, "\xA0")
        code_ptr = putw(code, code_ptr, table%[lookup("RCODE") + DICT_OFS])
        putbin(4, "\xB4\x4C\xCD\x21")

        # Now, we know where program ends and where starts free memory
        i = lookup("FREE_MEMORY")
        code%[table%[i + DICT_OFS]] = code%[table%[i + DICT_OFS]] + code_ptr

        if gen_target = TARGET_EXE then
                gen_exe_header(entry_point)
        end
end
